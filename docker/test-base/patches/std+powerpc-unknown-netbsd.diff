diff --git a/src/sys/pal/unix/thread.rs b/src/sys/pal/unix/thread.rs
index 7e4a01a..ed769d9 100644
--- a/src/sys/pal/unix/thread.rs
+++ b/src/sys/pal/unix/thread.rs
@@ -388,7 +388,7 @@ pub fn available_parallelism() -> io::Result<NonZeroUsize> {
                     if !set.is_null() {
                         let mut count: usize = 0;
                         if libc::pthread_getaffinity_np(libc::pthread_self(), libc::_cpuset_size(set), set) == 0 {
-                            for i in 0..u64::MAX {
+                            for i in 0..libc::cpuid_t::MAX {
                                 match libc::_cpuset_isset(i, set) {
                                     -1 => break,
                                     0 => continue,
diff --git a/src/sys/pal/unix/thread_parking/netbsd.rs b/src/sys/pal/unix/thread_parking/netbsd.rs
index 3be0812..90f809a 100644
--- a/src/sys/pal/unix/thread_parking/netbsd.rs
+++ b/src/sys/pal/unix/thread_parking/netbsd.rs
@@ -34,7 +34,11 @@ pub fn park_timeout(dur: Duration, hint: usize) {
         // Saturate so that the operation will definitely time out
         // (even if it is after the heat death of the universe).
         tv_sec: dur.as_secs().try_into().ok().unwrap_or(time_t::MAX),
-        tv_nsec: dur.subsec_nanos().into(),
+        tv_nsec: dur
+            .subsec_nanos()
+            .try_into()
+            .ok()
+            .unwrap_or(libc::c_long::MAX),
     };

     // Timeout needs to be mutable since it is modified on NetBSD 9.0 and
